name: Build with conda
on:
  push:
    branches:
      - master
  # For Pull-Requests, this runs the CI on merge commit
  # of HEAD with the target branch instead on HEAD, allowing
  # testing against potential new states which might have
  # been introduced in the target branch last commits.
  # See: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
  pull_request:

jobs:
  start_ec2_runner:
    if: needs.docs_only_check.outputs.docs_only != 'DOCS_ONLY'
    needs: [docs_only_check]
    uses: ./.github/workflows/ec2_runner_jobs.yml
    secrets: inherit
    permissions: write-all
    with:
      job_type: start

  linux:
    needs: [ set_linux_docs_only, set_linux_not_docs_only ]
    if: |
      always() &&
      !cancelled()
    runs-on: ubuntu-latest
    steps:
      - run: "linux_docs_only=\"${{ needs.set_linux_docs_only.outputs.linux_ok\
              \ }}\"\nlinux_not_docs_only=\"${{ needs.set_linux_not_docs_only.outputs.linux_ok\
              \ }}\"\nif [[ \"${linux_docs_only}\" == \"true\" || \"${linux_not_docs_only}\"\
              \ == \"true\" ]]; then\n    echo \"LINUX PASS\"\n    exit 0\nelse\n    echo\
              \ \"LINUX test FAIL\"\n    exit 1\nfi\n"

  set_linux_docs_only:
    if: needs.docs_only_check.outputs.docs_only == 'DOCS_ONLY'
    needs: [docs_only_check]
    outputs:
      linux_ok: ${{ steps.set_linux_ok.outputs.linux_ok }}
    runs-on:
      - ubuntu-latest
    steps:
      - id: set_linux_ok
        run: echo "linux_ok=true" >> $GITHUB_OUTPUT

  set_linux_not_docs_only:
    if: |
      always() &&
      !cancelled() && 
      needs.docs_only_check.outputs.docs_only != 'DOCS_ONLY'
    needs: [docs_only_check, start_ec2_runner]
    outputs:
      linux_ok: ${{ steps.set_linux_ok.outputs.linux_ok }}
    runs-on: ${{ needs.start_ec2_runner.result != 'failure' && needs.start_ec2_runner.outputs.label || 'ubuntu-latest'}}
    services:
      mongodb:
        image: mongo:4.4
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          submodules: recursive

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1.1.0
        id: cpu-cores

      - name: Install Conda environment from environment_unix.yml
        uses: mamba-org/setup-micromamba@v1.6.0
        with:
          environment-file: environment_unix.yml
          init-shell: >-
            bash
          cache-environment: true
          post-cleanup: 'all'

      - name: Build ArcticDB with conda (ARCTICDB_USING_CONDA=1)
        shell: bash -l {0}
        run: |
          # Protocol buffers compilation require not using build isolation.
          python -m pip install --no-build-isolation --no-deps -v -e .
        env:
          ARCTICDB_USING_CONDA: 1
          ARCTICDB_BUILD_CPP_TESTS: 1
          ARCTICDB_PROTOC_VERS: "4"

      - name: Build C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/linux-conda-release-build/
          make -j ${{ steps.cpu-cores.outputs.count }} arcticdb_rapidcheck_tests
          make -j ${{ steps.cpu-cores.outputs.count }} test_unit_arcticdb

      - name: Run C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/linux-conda-release-build/
          CTEST_OUTPUT_ON_FAILURE=1 make test

      - name: Install npm # Linux github runner image does not come with npm
        uses: actions/setup-node@v3.3.0
        with:
          node-version: '16'

      - name: Test with pytest
        shell: bash -l {0}
        run: |
          npm install -g azurite
          cd python
          export ARCTICDB_RAND_SEED=$RANDOM
          python -m pytest -n ${{ steps.cpu-cores.outputs.count }} tests
        env:
          ARCTICDB_USING_CONDA: 1
      - id: set_linux_ok
        run: echo "linux_ok=true" >> $GITHUB_OUTPUT

  stop-ec2-runner:
    needs: [ docs_only_check, start_ec2_runner, linux]
    if: ${{ always() && needs.docs_only_check.outputs.docs_only != 'DOCS_ONLY' }}
    uses: ./.github/workflows/ec2_runner_jobs.yml
    secrets: inherit
    permissions: write-all
    with:
      job_type: stop
      label: ${{ needs.start_ec2_runner.outputs.label }}
      ec2-instance-id: ${{ needs.start_ec2_runner.outputs.ec2-instance-id }}

  macos:
    needs: [ set_macos_docs_only, set_macos_not_docs_only ]
    if: |
      always() &&
      !cancelled()
    strategy:
      matrix:
        include:
          - os: macos-13

      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - run: "macos_docs_only=\"${{ needs.set_macos_docs_only.outputs.macos_ok\
              \ }}\"\nmacos_not_docs_only=\"${{ needs.set_macos_not_docs_only.outputs.macos_ok\
              \ }}\"\nif [[ \"${macos_docs_only}\" == \"true\" || \"${macos_not_docs_only}\"\
              \ == \"true\" ]]; then\n    echo \"MACOS PASS\"\n    exit 0\nelse\n    echo\
              \ \" MACOS test FAIL\"\n    exit 1\nfi\n"

  set_macos_docs_only:
    if: needs.docs_only_check.outputs.docs_only == 'DOCS_ONLY'
    needs: [docs_only_check]
    outputs:
      macos_ok: ${{ steps.set_macos_ok.outputs.macos_ok }}
    strategy:
      matrix:
        include:
          - os: macos-13

      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - id: set_macos_ok
        run: echo "macos_ok=true" >> $GITHUB_OUTPUT

  set_macos_not_docs_only:
    if: |
      always() &&
      !cancelled() &&
      needs.docs_only_check.outputs.docs_only != 'DOCS_ONLY'
    needs: [docs_only_check]
    outputs:
      macos_ok: ${{ steps.set_macos_ok.outputs.macos_ok }}
    strategy:
      matrix:
        include:
          - os: macos-13

      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3.3.0
        with:
          submodules: recursive

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1.1.0
        id: cpu-cores

      - name: Install Conda environment from environment_unix.yml
        uses: mamba-org/setup-micromamba@v1.6.0
        with:
          environment-file: environment_unix.yml
          environment-name: arcticdb
          init-shell: >-
            bash
          cache-environment: true
          post-cleanup: 'all'

      - name: Build ArcticDB with conda (ARCTICDB_USING_CONDA=1)
        shell: bash -l {0}
        run: |
          # Protocol buffers compilation require not using build isolation.
          python -m pip install --no-build-isolation --no-deps -v -e .
        env:
          ARCTICDB_USING_CONDA: 1
          ARCTICDB_BUILD_CPP_TESTS: 1
          ARCTICDB_PROTOC_VERS: "4"

      - name: Build C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/darwin-conda-release-build/
          make -j ${{ steps.cpu-cores.outputs.count }} arcticdb_rapidcheck_tests
          make -j ${{ steps.cpu-cores.outputs.count }} test_unit_arcticdb

      - name: Run C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/darwin-conda-release-build/
          CTEST_OUTPUT_ON_FAILURE=1 make test

      - name: Install npm
        uses: actions/setup-node@v3.3.0
        with:
          node-version: '16'

      - name: Test with pytest
        shell: bash -l {0}
        run: |
          npm install -g azurite
          cd python
          export ARCTICDB_RAND_SEED=$RANDOM
          python -m pytest -n ${{ steps.cpu-cores.outputs.count }} tests
        env:
          ARCTICDB_USING_CONDA: 1
      - id: set_macos_ok
        run: echo "macos_ok=true" >> $GITHUB_OUTPUT

  docs_only_check:
    name: Check for docs-only change
    outputs:
      docs_only: ${{ steps.docs_only_check.outputs.docs_only }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 10
      - id: files
        name: Get changed files
        uses: tj-actions/changed-files@v23.1
        with:
          files_ignore: /**/*.yml|README.md #change this to docs paths
          files_ignore_separator: '|'
      - id: docs_only_check
        if: steps.files.outputs.any_changed != 'true'
        name: Check for docs-only changes
        run: echo "docs_only=DOCS_ONLY" >> $GITHUB_OUTPUT