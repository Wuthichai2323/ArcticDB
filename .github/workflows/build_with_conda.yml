name: Build with conda
on:
  push:
    branches:
      - master
  # For Pull-Requests, this runs the CI on merge commit
  # of HEAD with the target branch instead on HEAD, allowing
  # testing against potential new states which might have
  # been introduced in the target branch last commits.
  # See: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
  pull_request:

jobs:
  linux:
    strategy:
      matrix:
          os: [ubuntu-latest]
          python_version:  ["3.8", "3.9", "3.10"]
          compiler: ["gcc", "clang", "system_compiler"]

      fail-fast: false
    runs-on: ${{ matrix.os }}

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
  
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores

      - name: Append to environment_unix.yml
        shell: bash -l {0}
        run: |
          echo "  - python ==${{ matrix.python_version }}" >> environment_unix.yml
          if [[ "${{ matrix.compiler }}" != "system_compiler" ]]; then
            echo "  - ${{ matrix.compiler }}" >> environment_unix.yml
          fi


      - name: Install Conda environment from environment_unix.yml
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: environment_unix.yml
          init-shell: >-
            bash
          cache-environment: false
          post-cleanup: 'all'

      - name: Build ArcticDB with conda (ARCTICDB_USING_CONDA=1)
        shell: bash -l {0}
        run: |
          # Protocol buffers compilation require not using build isolation.
          python -m pip install --no-build-isolation --no-deps -v -e .
        env:
          ARCTICDB_USING_CONDA: 1
        
      - name: Build C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/linux-conda-release-build/
          make -j ${{ steps.cpu-cores.outputs.count }} arcticdb_rapidcheck_tests
          make -j ${{ steps.cpu-cores.outputs.count }} test_unit_arcticdb

          - name: Run C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/linux-conda-release-build/
          make test

      - name: Test with pytest
        shell: bash -l {0}
        run: |
          cd python
          python -m pytest tests -v

  macos:
    strategy:
      matrix:
        os: [macos-latest]
        python_version:  ["3.8", "3.9", "3.10"]
        compiler: ["clang", "system_compiler"]

      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores

      - name: Append to environment_unix.yml
        shell: bash -l {0}
        run: |
          echo "  - python ==${{ matrix.python_version }}" >> environment_unix.yml
          if [[ "${{ matrix.compiler }}" != "system_compiler" ]]; then
            echo "  - ${{ matrix.compiler }}" >> environment_unix.yml
          fi

      - name: Install Conda environment from environment_unix.yml
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: environment_unix.yml
          environment-name: arcticdb
          init-shell: >-
            bash
          cache-environment: false
          post-cleanup: 'all'

      - name: Build ArcticDB with conda (ARCTICDB_USING_CONDA=1)
        shell: bash -l {0}
        run: |
          # Protocol buffers compilation require not using build isolation.
          python -m pip install --no-build-isolation --no-deps -v -e .
        env:
          ARCTICDB_USING_CONDA: 1

      - name: Build C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/darwin-conda-release-build/
          make -j ${{ steps.cpu-cores.outputs.count }} arcticdb_rapidcheck_tests
          make -j ${{ steps.cpu-cores.outputs.count }} test_unit_arcticdb

      - name: Run C++ Tests
        shell: bash -l {0}
        run: |
          cd cpp/out/darwin-conda-release-build/
          make test

      - name: Test with pytest
        shell: bash -l {0}
        run: |
          cd python
          python -m pytest tests -v
