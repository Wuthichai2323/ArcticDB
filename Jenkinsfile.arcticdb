def pytags = []
if (env.BRANCH_NAME.startsWith('release-') || env.BRANCH_NAME == 'master') {
    pytags = ['cp36', 'cp37', 'cp38', 'cp39', 'cp310']
} else {
    pytags = ['cp36', 'cp310']
}
def tasks = [:]

try {
    node('ts2-el7') {
        stage('Checkout Code') {
            checkout scm
            step([$class: 'StashNotifier', prependParentProjectKey: true])
            sh '''#!/bin/bash
            | withproxy git submodule update --init --recursive
            '''.stripMargin()
            stash name: 'source'
        }
        stage('Setup Tasks') {
            pytags.each { pytag ->
                tasks[pytag] = {
                    node('ts2-el7') {
                        unstash name: 'source'
                        sh """#!/bin/bash
                        | set -xe
                        | source <(curl -s https://repo.prod.m/artifactory/man/pegasus-cli/master/pegasus-profile.sh)
                        | pegasus create ./venv  # using it for newer grpcio-tools
                        | pip install -i https://repo.prod.m/artifactory/api/pypi/external-pypi/simple 'grpcio-tools<=1.48.2' 'grpcio<=1.48.2'
                        | pip install Cython wheel twine
                        | python ./scripts/public_release.py --archive /tmp/arcticdb --py-tags ${pytag}
                        """.stripMargin()
                        stash name: "wheel-${pytag}", includes: 'dist/*.whl'
                    }
                }
            }

        }
    }

    // Free up the previously allocated node
    stage('Build Wheels') {
        parallel tasks
    }

    // The tarball pulled in below is a pre-configured and compiled version of curl-7.67 (saves on build times). It can be recreated by doing the following in 
    // releases-docker.repo.prod.m/man/base/manylinux2014_x86_64:2021-11-28-06a91ec :
    // yum update -y
    // yum install wget gcc openssl-devel -y
    // wget https://curl.haxx.se/download/curl-7.67.0.tar.gz
    // tar -xvf curl-7.67.0.tar.gz
    // cd curl-7.67.0
    // ./configure --with-ssl
    // make
    node('ts2-el7') {
        stage('Create Manylinux Wheel') {
            for (String pytag in pytags) {
                unstash "wheel-${pytag}"
            }
            sh '''#!/bin/bash
            | set -xe
            | sudo docker run -v "$(pwd)/wheelhouse":/wheelhouse -v "$(pwd)/dist":/dist --entrypoint bash -i releases-docker.repo.prod.m/man/base/manylinux2014_x86_64:2021-11-28-06a91ec \\
            |                 -c 'yum update -y; yum install -y wget gcc openssl-devel libatomic; wget "http://artifactory.svc.prod.ahl:80/artifactory/data/arcticc-dependency-curl.7.67.0.tar.gz" -O /tmp/curl-7.67.0.tar.gz; \\
            |                     cd /tmp; tar -xvf curl-7.67.0.tar.gz; cd curl-7.67.0; make install; for whl in /dist/*; do auditwheel repair -w /wheelhouse "$whl"; done'
            '''.stripMargin()
        }

        stage('Run tests') {
            unstash 'source'
            def localTasks = [:]
            pytags.each { pytag ->
                localTasks[pytag] = {
                    withCredentialsOptional([
                        string(credentialsId: 'ARCTIC_NATIVE_TESTS_S3_ACCESS', variable: 'ACCESS_KEY'),
                        string(credentialsId: 'ARCTIC_NATIVE_TESTS_S3_SECRET', variable: 'SECRET_KEY'),
                    ]) {
                        sh """#!/bin/bash
                        |set -xe
                        |cat >script_${pytag}.sh <<END
                        |set -xe
                        |mkdir -p /tmp/tests/integration
                        |cp -r /workspace/tests/integration/arctic /tmp/tests/integration
                        |cp -r /workspace/examples/fundamentals/load.py /tmp/tests
                        |/opt/python/${pytag}*/bin/pip install --trusted-host repo.prod.m -i http://repo.prod.m/artifactory/api/pypi/external-pypi/simple -U pip
                        |/opt/python/${pytag}*/bin/pip install --trusted-host repo.prod.m -i http://repo.prod.m/artifactory/api/pypi/external-pypi/simple /workspace/wheelhouse/*${pytag}*.whl -r /workspace/test-requirements.txt
                        |cd /tmp/  # make sure we are not inside the code directory
                        |if [[ "${pytag}" == "cp39" || "${pytag}" == "cp310" ]]; then
                        |    echo Skipping pytests on Python 3.9 and 3.10 for now
                        |    # Latest protobuf is only available in 3.9 and 3.10,
                        |    # so testing those versions against it.
                        |    /opt/python/${pytag}*/bin/pip install --trusted-host repo.prod.m -i http://repo.prod.m/artifactory/api/pypi/external-pypi/simple -U grpcio grpcio-tools protobuf
                        |else
                        |    /opt/python/${pytag}*/bin/pytest tests
                        |fi
                        |/opt/python/${pytag}*/bin/python /tmp/tests/load.py --host s3.gdc.res.m \\
                        |     --bucket arctic-native-tests \\
                        |     --access "\${ACCESS_KEY}" \\
                        |     --secret "\${SECRET_KEY}" \\
                        |     --library test_fundamentals_\\\$RANDOM
                        |END
                        |sudo docker run --entrypoint bash -v \$(pwd):/workspace releases-docker.repo.prod.m/man/base/manylinux2014_x86_64:2021-11-28-06a91ec /workspace/script_${pytag}.sh
                        """.stripMargin()
                    }
                }
            }
            // Using a single executor for now
            try {
                parallel localTasks
            } finally {
                archiveArtifacts artifacts: 'wheelhouse/*', onlyIfSuccessful: false
            }
        }
        if (env.BRANCH_NAME.startsWith("release-")) {
            stage('Upload to artifactory') {
                withEnv([
                    "REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-bundle.crt",
                    "SSL_CERT_FILE=/etc/ssl/certs/ca-bundle.crt",
                    "CURL_CA_BUNDLE=/etc/ssl/certs/ca-bundle.crt"
                ]) {
                    withCredentials([usernamePassword(credentialsId: 'artifactory-manuploader', usernameVariable: 'TWINE_USERNAME', passwordVariable: 'TWINE_PASSWORD')]) {
                        sh '''#!/bin/bash
                        | set -xe
                        | twine upload --repository-url=https://repo.prod.m/artifactory/api/pypi/man-external-python-releases wheelhouse/*
                        '''.stripMargin()
                    }
                }
            }
        }
        currentBuild.result = 'SUCCESS'
    }
} catch (e) {
    currentBuild.result = 'FAILURE'
} finally {
    node('ts2-el7') {
        step([$class: 'StashNotifier', prependParentProjectKey: true])
    }
}
